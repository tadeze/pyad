# distutils: language = c++# distutils: sources = Rectangle.cpp# Cython interface file for wrapping the object##from libcpp.vector cimport vectorfrom libcpp cimport boolimport numpy as np# c++ interface to cythoncdef extern from "CPP/Tree.hpp":    cdef cppclass Tree:        Tree()        #bool rangeCheck        void iTree(vector[int] ,vector[vector[double]] ,                int,int,bool)        double pathLength(vector[double])cdef class iTree:    cdef Tree *thisptr    def __cinit__(self):        self.thisptr = new Tree()    def __dealloc__(self):        del self.thisptr    def path_length(self,vector[double] instance):        self.thisptr.pathLength(instance)    def iTree(self,vector[int] index, vector[vector[double]] traindata,int height,int maxheight,bool stopheight):        self.thisptr.iTree(index,traindata,height,maxheight,stopheight)    #def set_range_check(self,bool val):    #    self.thisptr.rangeCheck = val    #def get_range_check(self):    #    return self.thisptr.rangeCheck